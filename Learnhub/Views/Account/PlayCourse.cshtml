@model Learnhub.Models.Course

@{
    ViewData["Title"] = "Play Course";

    var rawPaths = Model.VideoFilePaths?.Split(';') ?? new string[0];
    var videoPaths = rawPaths
        .Where(p => !string.IsNullOrWhiteSpace(p))
        .Select(p => $"/Video/{p.Trim()}")
        .ToArray();

    var videoNames = Model.VideoFileNames?.Split(';') ?? new string[videoPaths.Length];
}

<div class="container mt-4">
    <h2>@Model.Title</h2>
    <p>@Model.Description</p>
    <p><strong>Price:</strong> $@Model.Price</p>

    @if (videoPaths.Length > 0)
    {
        <div class="mb-3 d-flex align-items-center flex-wrap gap-4 fs-5">
            <span><i class="bi bi-hand-thumbs-up-fill text-primary"></i>
                <span id="totalLikes">@Model.Likes</span> Likes</span>
            <span><i class="bi bi-play-circle-fill text-success"></i>
                <span id="totalViews">@Model.Views</span> Views</span>
            <span><i class="bi bi-heart-fill text-danger"></i>
                <span id="totalFavorites">@Model.Favorites</span> Favorites</span>
            <span><i class="bi bi-cart-check-fill text-warning"></i>
                <span id="totalPurchases">@Model.Purchases</span> Purchases</span>
        </div>

        <div class="row">
            <div class="col-md-8 mb-4">
                <div class="responsive-video-container mb-2">
                    <video id="mainVideo" controls onplay="increasePlayCount()">
                        <source src="@videoPaths[0]" type="video/mp4" />
                        Your browser does not support the video tag.
                    </video>
                </div>

                <div class="d-flex align-items-center gap-4 mb-3 fs-5">
                    <button class="btn btn-outline-primary btn-sm" onclick="toggleLike()">
                        <i class="bi bi-hand-thumbs-up"></i>
                        <span id="likeCount">@Model.Likes</span> Like
                    </button>

                    <button id="favoriteBtn" class="btn btn-outline-danger btn-sm" onclick="toggleFavorite()">
                        <i id="favoriteIcon" class="bi bi-heart"></i>
                        <span id="favoriteCount">@Model.Favorites</span> Favorite
                    </button>

                    <!-- 🛒 Purchase Button Added -->
                    <button id="purchaseBtn" class="btn btn-outline-warning btn-sm" onclick="purchaseCourse()">
                        <i class="bi bi-cart-plus"></i>
                        <span id="purchaseBtnText">Purchase</span>
                    </button>

                    <span><i class="bi bi-play-fill text-success"></i>
                        <span id="videoPlayCount">0</span> plays</span>
                </div>

                <div id="currentVideoInfo" class="text-muted">
                    Video: @(videoNames.Length > 0 ? videoNames[0] : "Unknown")
                </div>
            </div>

            <div class="col-md-4">
                <h5>Video List</h5>
                <ul class="list-group">
                    @for (int i = 0; i < videoPaths.Length; i++)
                    {
                        var name = (videoNames.Length > i && !string.IsNullOrWhiteSpace(videoNames[i]))
                            ? videoNames[i]
                            : $"Video {i + 1}";
                        <li class="list-group-item">
                            <a href="#" onclick="playVideo('@videoPaths[i]', '@name'); return false;">
                                @name
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
    else
    {
        <p class="text-danger fw-bold">No videos available. Please check that the course's VideoFilePaths are set correctly and the video files exist in /Video/.</p>
    }
</div>

<style>
    .responsive-video-container {
        position: relative;
        padding-bottom: 56.25%;
        height: 0;
        overflow: hidden;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    .responsive-video-container video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
</style>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

@section Scripts {
<script>
    const courseId = @Model.Id;
    let videoPlayCount = 0;

    function playVideo(path, name) {
        const video = document.getElementById("mainVideo");
        video.src = path;
        video.load();
        video.play();

        videoPlayCount = 0;
        document.getElementById("videoPlayCount").textContent = videoPlayCount;
        document.getElementById("currentVideoInfo").textContent = "Video: " + name;
    }

    function toggleLike() {
        fetch(`/Course/LikeCourse/${courseId}`, {
            method: 'POST'
        })
        .then(res => res.ok ? res.json() : Promise.reject())
        .then(data => {
            if (typeof data.likes === "number") {
                document.getElementById("totalLikes").textContent = data.likes;
                document.getElementById("likeCount").textContent = data.likes;
            }
        })
        .catch(err => console.error("Error updating like:", err));
    }

    function toggleFavorite() {
        fetch(`/Course/ToggleFavoriteCourse/${courseId}`, {
            method: 'POST'
        })
        .then(res => res.ok ? res.json() : Promise.reject())
        .then(data => {
            document.getElementById("totalFavorites").textContent = data.favorites;
            document.getElementById("favoriteCount").textContent = data.favorites;

            const icon = document.getElementById("favoriteIcon");
            icon.classList.toggle("bi-heart");
            icon.classList.toggle("bi-heart-fill");
        })
        .catch(err => console.error("Error updating favorite:", err));
    }

    function increasePlayCount() {
        videoPlayCount++;
        document.getElementById("videoPlayCount").textContent = videoPlayCount;

        fetch(`/Course/AddView/${courseId}`, {
            method: 'POST'
        })
        .then(() => {
            const viewSpan = document.getElementById("totalViews");
            viewSpan.textContent = parseInt(viewSpan.textContent) + 1;
        })
        .catch(err => console.error("Error updating view count:", err));
    }

    function purchaseCourse() {
        fetch(`/Course/PurchaseCourse/${courseId}`, {
            method: 'POST'
        })
        .then(res => res.ok ? res.json() : Promise.reject())
        .then(data => {
            if (data.success) {
                document.getElementById("totalPurchases").textContent = data.purchases;
                document.getElementById("purchaseBtn").disabled = true;
                document.getElementById("purchaseBtnText").textContent = "Purchased";
                alert("Purchase successful!");
            } else {
                alert("Purchase failed: " + (data.message || "unknown error"));
            }
        })
        .catch(err => console.error("Error purchasing course:", err));
    }
</script>
}

